-- vim: ts=2: sw=2: expandtab: syntax=haskell
data Unit = Unit ;
data Bool = False | True ;
data Maybe a = Nothing | Just a ;
data Either a b = Left a | Right b ;
data Pair a b = Pair a b ;
data N r = Z | S r ;
data L a r = N | C a r ;
data P r a = PN | PC a (r (Pair a a)) ;
data MM = MM (Mu N);
data MMM a = MMM (Mu P a);
id = \x -> x ;
x = id;
z = {True -> True; False -> False};
z2 = {Nothing -> False; Just x -> True};
b = True ;
c = x b;
p = Pair ;
z3 = Pair True False;
zero = In 0 Z ;
succ = \n -> In 0 (S n) ;
nil = In 0 N ;
cons = \x -> \xs -> In 0 (C x xs) ;
pnil = In 1 PN ;
pcons = \x -> \xs -> In 1 (PC x xs) ;
-- ppnil = In 0 PN ;
one = succ zero ;
two = succ one ;
three = succ two ;
z5 = cons nil nil ;
z6 = cons True nil ;
z7 = pcons True (pcons (Pair False True) pnil) ;
z8 = pcons one (pcons (Pair two three) pnil) ;
flip = \f -> \x -> \y -> f y x;
plus = mpr add cast { Z   -> \m -> m
                    ; S n -> \m -> succ (add n m) } ;
length = mpr len cast { N -> zero; C x xs -> succ (len xs) } ;
psum = mpr sum cast { a . (a -> Mu N) -> Mu N }
        { PN      -> \f -> zero
        ; PC x xs -> \f -> plus (f x)
                                (sum xs {Pair a b -> plus (f a) (f b)} )
        } ;
n4 = plus (plus one one) (plus one one) ;
n5 = length z6 ;
n6 = length z5 ;
-- n7 = psum z8 id ;
-- n8 = flip psum ;
true = True
